# ***
# * Cache
# *
# * - Introducing article: https://www.nginx.com/blog/nginx-caching-guide/
# * - Long article: https://www.nginx.com/blog/nginx-high-performance-caching/#BasicPrinciplesofContentCaching
# * - Firefox extension to debug http headers: https://addons.mozilla.org/en-US/firefox/addon/http-header-live/
# * 
# * Only two directives are needed to enable basic caching: proxy_cache_path (http{} level) and proxy_cache (server{} level).
# * proxy_cache_path directive sets the path and configuration of the cache, and the proxy_cache directive activates it.
# *   levels:    sets up a two ^`^qlevel directory hierarchy under /path/to/cache/. Having a large number of files in a 
# *              single directory can slow down file access, so we recommend a two level directory hierarchy for most 
# *              deployments. If the levels parameter is not included, NGINX puts all files in the same directory.
# *   keys_zone: sets up a shared memory zone for storing the cache keys and metadata such as usage timers. 
# *              Having a copy of the keys in memory enables NGINX to quickly determine if a request is a HIT 
# *              or a MISS without having to go to disk, greatly speeding up the check. A 1MB zone can store 
# *              data for about 8,000 keys, so the 10MB zone configured in the example can store data for about 80,000 keys.
# *   inactive:  specifies how long an item can remain in the cache without being accessed. In this example, a file that 
# *              has not been requested for 24h is automatically deleted from the cache by the cache manager process, 
# *              regardless of whether or not it has expired. The default value is 10 minutes (10m). Inactive content 
# *              differs from expired content. NGINX does not automatically delete content that has expired as defined 
# *              by a cache control header (Cache-Control:max-age=120 for example). Expired (stale) content is deleted 
# *              only when it has not been accessed for the time specified by inactive. When expired content is accessed, 
# *              NGINX refreshes it from the origin server and resets the inactive timer.
# *   max_size:  sets the upper limit of the size of the cache (to 2 gb in this example). It is optional; not specifying 
# *              a value allows the cache to grow to use all available disk space. When the cache size reaches the limit, 
# *              a process called the cache manager removes the files that were least recently used to bring the cache size back under the limit.
#
# You can check the directory size from time to time: du -sh /var/cache/nginx
proxy_cache_path  /var/cache/nginx  levels=1:2  keys_zone=cachezone:50m  inactive=48h  max_size=3g
                                    use_temp_path=off;
proxy_cache_key "$scheme$host$request_uri";


server {
    server_name 10.1.0.106;
    listen 80;
    listen [::]:80;

    access_log  /var/log/nginx/mirabelle.log  combined;
    error_log   /var/log/nginx/mirabelle_errors.log;

    location / {
        proxy_cache              cachezone;
        # Use If-Modified-Since to use browser cache
        proxy_cache_revalidate   on;
        # Use cache if proxied server return an error
        proxy_cache_use_stale    error timeout updating http_500 http_502
                                 http_503 http_504;
        # silently update cache in the background
        proxy_cache_background_update   on;
        # Adds an X-Cache-Status HTTP header in responses to clients: helps debugging the
        # cache.
        # https://www.nginx.com/blog/nginx-caching-guide/#Frequently-Asked-Questions-(FAQ)
        # Eg. X-Cache-Status: HIT
        # To verify cache is working: curl -I http://10.1.0.106/
        add_header X-Cache-Status   $upstream_cache_status;
        add_header X-Cache-Date     $upstream_http_date;

        # proxy_cache_valid indicates which query codes is concerned by the cache and the caching time 
        proxy_cache_valid           any  24h;

        # BUT "Parameters of caching can also be set directly in the response header. This has higher 
        # priority than setting of caching time using the directive." That's why it is interesting to 
        # disable some cache headers with proxy_ignore_headers directive
        #proxy_ignore_headers X-Accel-Expires;
        #proxy_ignore_headers Expires;
        #proxy_ignore_headers Cache-Control;
        #proxy_ignore_headers Vary;

        # Bypass the cache when /?nocache=1 is provided
        proxy_cache_bypass $arg_nocache;
        # Bypass the cache when user ask for it whith his browser: shift+f5
        # Or try the following command to test: curl -I -H 'Pragma: no-cache' http://127.0.0.1
        proxy_cache_bypass $http_pragma;

        # Avoid error "upstream sent too big header"
        proxy_busy_buffers_size   512k;
        proxy_buffers   4 512k;
        proxy_buffer_size   256k;
        # request can be quite long: increasing the 300s default
        proxy_read_timeout 420s;

        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection $connection_upgrade;
        proxy_redirect off;
        proxy_pass http://127.0.0.1:8001/;
    }
}
